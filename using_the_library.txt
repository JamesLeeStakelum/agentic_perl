### **Instructions for Coding with the Perl Library**

This document provides essential guidelines for leveraging your Perl library’s LLM-interaction and utility functions effectively.

#### **1. Agentic Design Principles**
Guiding philosophies to drive high-quality, reliable outputs.

* **1.1 Principled Planning & Decomposition**
    * **Plan First, Code Last, Always Test**:
        * Concept Overview
        * Technical Specs
        * Implementation Plan
        * Code Generation
        * Test Plan & Execution
        * Iterate
    * **Hierarchical Task Breakdown**:
        * Use `chunk_text()` and modular “Pass” functions to split problems into atomic steps.

* **1.2 Adversarial Quality & Iterative Refinement**
    * **Hill-Climbing for Everything**:
        * Generate a candidate, then loop to improve via `hill_climbing()`.
    * **Gap Analysis**:
        * Prevent context drift by comparing new iterations against the prior best.
    * **Multi-Model Synthesis**:
        * Use `multi_model_synthesis()` to ensemble diverse LLM outputs; simulate expert panels for adversarial critique.

* **1.3 High-Fidelity, Test-Driven Generation**
    * **Automate Testing**:
        * Wrap code prompts with `validate_pass()` to run linters/tests and feed results back into the `hill_climbing()` loop.
    * **Embed Style Guides**:
        * Include your Perl Style Guide in prompts to enforce coding standards.

* **1.4 Advanced LLM Orchestration**
    * **Web-Sourced Enrichment**:
        * While the library lacks Browse, your agent can retrieve external context via `Google Search` or Browse.
    * **Output Continuation**:
        * For long text, enable `handle_long_output` in `hill_climbing()` to seamlessly chain chunks.

#### **2. Core LLM-Interaction Functions**
Choose the right tool for your task.

| Function | Role | When to Use |
| :--- | :--- | :--- |
| `call_llm()` | One-shot text generation | Quick factual lookups or simple phrases |
| `hill_climbing()` | Iterative refinement with critique & voting | Generating/refining code, creative content, summaries |
| `multi_model_synthesis()` | Ensemble of models + hill climbing | Complex, open-ended problems requiring diverse views |

#### **3. Response Parsing**

* **3.1 Extracting Text Between Tags**
    * Always wrap answers in `<answer>...</answer>` and use `extract_text_between_tags()` to parse.

* **3.2 Formatting Rules for Tags**
    * **Mandatory**: `<answer>…</answer>`
    * **Optional**: `<comments>…</comments>`, `<thinking>…</thinking>`
    * No Interlacing/Nesting, Clean Tags Only.

#### **4. General Output Format**
* No emoticons.
* Straight quotes/apostrophes only.
* Use `--` for dashes.
* Prefer ASCII; limit non-printables to `\n`.

#### **5. Handling Factual Information**
* **Default**: Rely solely on prompt-provided data.
* Only use encyclopedic knowledge when explicitly asked.
* If unsure, process only given context to avoid hallucinations.

#### **6. Utility Functions**

* **6.1 File System & I/O**
    * `read_file($filename)` – robustly loads file content
    * `write_file($file,$content,$append)` – writes or appends text
    * `ensure_directory($dir)` – create directories as needed
    * `bundle_files_in_directory({…})` / `merge_files_in_directory(…)`

* **6.2 Text & List Processing**
    * `chunk_text({text,chunk_size,overlap})` – split long inputs for LLMs
    * `generate_unique_list({…})` – extract or brainstorm de-duplicated lists
    * `deduplicate_list_scalable({…})` / `consolidate_list_semantically({…})`

* **6.3 Orchestration “Pass” Functions**
    * High-level, multi-step workflows:

| Pass | Purpose |
| :--- | :--- |
| `generate_pass()` | Initial draft generation |
| `review_pass()` | Automated issue detection |
| `patch_pass()` | Apply review feedback iteratively |
| `polish_pass()` | Style/factual refinement |
| `consistency_pass()` | Ensure coherence across document |
| `validate_pass()` | Run external tools (linters/tests) |
| `finalize_pass()` | Final formatting/cleanup |
| `reconcile_document()` | Align document to transcript via gap-analysis + hill climb |
| `atomic_code_surgery()` | Targeted function-level code edits |
| `humanize_text()` | Rewrite text to sound more natural |

